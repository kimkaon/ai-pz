# AI 어시스턴트 프로젝트 개발 현황 (2025-07-08 최종 업데이트)

## 🎯 현재 상태: RTX 3070 언어 제한 완료

### ✅ 완료된 주요 기능
- **다중 모델 시스템**: 기본, RTX 3070 최적화, 영어 특화, 하이브리드 파인튜닝
- **언어 제한 완전 적용**: RTX 3070 모든 모델 영어/한국어만 지원
- **실시간 스트리밍**: 토큰 단위 출력 + 문장 단위 TTS 큐
- **GPU 최적화**: 4bit 양자화, 8GB VRAM 최적화
- **안전성 강화**: 다른 언어 자동 차단 시스템

## 📁 최종 정리된 파일 구조

### 핵심 실행 파일 (총 8개)
```
main.py                     # 메인 어플리케이션 (1151줄, 완전 통합)
├── 모델 선택 및 관리
├── 실시간 대화 시스템
├── 언어 제한 로직
└── 스트리밍 TTS 통합

config_gpu.py              # GPU 설정 및 CUDA 최적화
voice_utils.py             # 음성 처리 (STT + 실시간 음성 감지)
nous_hermes2_mistral_loader.py  # 기본 LLM 로더 (GGUF)
openvoice_tts.py           # OpenVoice V2 TTS 엔진
log_settings.py            # 로그 시스템 (JSON 설정 저장)
mic_settings.py            # 마이크 설정 영구 저장
prompt_templates.py        # 프롬프트 템플릿 관리
```

### 파인튜닝 시스템 (3개)
```
finetuning_integration.py  # 파인튜닝 모델 통합 허브
hybrid_finetuning_integration.py  # 하이브리드 시스템 관리
run_finetuning.bat         # 파인튜닝 관리 스크립트
```

### 추가 시스템 파일들
```
setup_gpu.py               # GPU 환경 초기 설정
mic_settings.json          # 마이크 설정 저장 파일
README.md                  # 프로젝트 전체 사용 설명서
.gitignore                 # Git 버전 관리 제외 파일 설정
```

### 디렉토리 구조
```
models/                    # 학습된 모델 저장소
├── rtx3070_optimized_best/    # 메인 RTX 3070 최적화 모델
├── rtx3070_optimized_final/   # 백업 RTX 3070 최적화 모델
└── Nous-Hermes-2-Mistral-7B-DPO.Q5_K_M.gguf  # 기본 LLM 모델

finetuning/               # 파인튜닝 전용 환경
├── 이 폴더에 대한 설명은 finetuning/README.md를 참조하십시오
├── 다양한 파인튜닝 스크립트와 데이터셋 관리
└── 모델 학습 및 최적화 도구들

deta/                     # 음성 녹음 파일 저장소
├── recorded_1.wav ~ recorded_41.wav (사용자 음성 기록)
└── 실시간 대화 중 녹음된 음성 파일들

tts_output/              # TTS 생성 음성 파일 (gitignore)
├── 실시간 생성되는 AI 응답 음성 파일
└── stream_*.wav, response.wav 등

OpenVoice/               # OpenVoice V2 TTS 엔진
├── 이 폴더에 대한 설명은 OpenVoice/README.md를 참조하십시오
├── checkpoints_v2/ (TTS 모델 체크포인트)
├── resources/ (TTS 리소스 파일)
└── openvoice/ (TTS 엔진 코어)

ksmevn/                  # Python 가상환경
├── Scripts/ (실행 파일 및 pip)
├── Lib/ (설치된 패키지들)
└── Include/ (헤더 파일)

.vscode/                 # VS Code 설정
├── 개발 환경 설정 파일들
└── 디버그 및 실행 구성

.git/                    # Git 버전 관리
└── 프로젝트 버전 관리 정보

.github/                 # GitHub 관련 설정
├── prompts/ (GitHub Copilot 프롬프트)
└── 프로젝트 워크플로우 설정
```
## 🚀 최신 완료 사항 (2025-07-08)

### 1. RTX 3070 모델 언어 제한 완전 적용
```python
# 모든 RTX 3070 모델 인스턴스가 언어 제한됨
rtx3070_unfiltered_model = RTX3070OptimizedLoader(language_restriction=True)
rtx3070_language_limited_model = RTX3070OptimizedLoader(language_restriction=True)
```

### 2. 언어 감지 시스템
```python
language_patterns = {
    'ko': re.compile(r'[\uAC00-\uD7A3]'),  # 한글
    'en': re.compile(r'[A-Za-z]'),          # 영어
    'other': re.compile(r'[\u4E00-\u9FFF\u3040-\u309F...]')  # 기타 언어 차단
}
```

### 3. 사용자 메뉴 업데이트
- **모델 설명**: 모든 RTX 3070 모델이 "영어/한국어 제한"으로 표시
- **확인 메시지**: 언어 제한 안내 메시지 추가
- **내부 로직**: 무제한/제한 모델 구분 없이 모두 제한 적용

### 4. 문서 완전 새로 작성
- **README.md**: 179줄 → 완전 새로 작성, 현재 상태 정확 반영
- **star ledd me.txt**: 273줄 → 현재 문서로 완전 교체

## 🤖 지원 모델 현황

### 1. 기본 모델 (Nous-Hermes-2-Mistral)
- **상태**: ✅ 완전 작동
- **특징**: 다국어 지원, 범용 대화
- **메모리**: 기본 로딩

### 2. RTX 3070 최적화 모델 (영어/한국어 제한)
- **상태**: ✅ 언어 제한 완전 적용
- **특징**: 
  - 4bit 양자화 (메모리 ~6GB)
  - **모든 변형이 영어/한국어만 지원**
  - 다른 언어 입력시 자동 경고
- **안전성**: 강화됨

### 3. 영어 통합 파인튜닝 모델
- **상태**: ✅ 완전 작동
- **특징**: 영어 대화/QnA 특화
- **경로**: `./finetuning/models/unified_model`

### 4. 하이브리드 파인튜닝 모델
- **상태**: ✅ 완전 작동
- **특징**: 
  - 한국어 특화 전문 모델 조합
  - 자동 도메인 분류 (QnA, 일상대화 등)
  - 전문가 모드 지원

## ⚙️ 핵심 기술 구현

### GPU 최적화 (RTX 3070 8GB)
```python
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_use_double_quant=True,
)
```

### 실시간 스트리밍 시스템
```python
# 토큰 단위 실시간 출력
for token in chat_stream(llm, prompt):
    print(token, end="", flush=True)
    
    # 문장 단위 TTS 큐
    if sentence_end_detected(token):
        tts_queue.put((sentence, wav_path))
```

### 언어 제한 검증
```python
def validate_language(self, user_input):
    if not self.language_restriction:
        return True, 'unlimited'
    
    detected_lang = self.detect_language(user_input)
    if detected_lang == 'other':
        return False, "❌ 지원하지 않는 언어입니다. 영어 또는 한국어만 사용해주세요."
    
    return True, detected_lang
```

## 🎮 사용법 요약

### 메인 메뉴 옵션
```
s: 음성대화    - 실시간 스트리밍 대화 (추천)
m: 텍스트대화  - 키보드 대화
p: 마이크설정  - 입력 장치 설정
md: 모델선택   - AI 모델 변경 (언어 제한 안내)
lg: 로그       - 디버그 로그 on/off
ft: 파인튜닝관리 - 하이브리드 시스템 관리
q: 종료        - 프로그램 종료
```

### 모델 선택시 확인 메시지
- **RTX 3070 모델**: "영어와 한국어만 지원합니다"
- **영어 모델**: "한국어 응답 품질이 떨어질 수 있습니다"
- **하이브리드 모델**: "한국어 특화 모델입니다"

## 📊 성능 및 안전성

### RTX 3070 최적화 모델
- **메모리 사용**: ~6GB VRAM
- **응답 속도**: 2-3초 평균
- **언어 지원**: **영어/한국어만** (안전성 강화)
- **품질**: 높은 수준 유지
- **안전성**: 다른 언어 자동 차단

### 하이브리드 시스템
- **자동 분류**: 입력 내용 분석 후 최적 모델 선택
- **품질 향상**: 기본 모델 대비 20-30% 개선
- **전문 응답**: 도메인별 특화 모델 활용

## 🛠️ 환경 정보

### 하드웨어 요구사항
- **GPU**: NVIDIA RTX 3070 8GB (또는 유사)
- **메모리**: 충분한 시스템 RAM (16GB+ 권장)
- **저장공간**: 모델 파일용 10GB+

### 소프트웨어 환경
- **Python**: 3.10+
- **CUDA**: 11.8+
- **핵심 라이브러리**: 
  - transformers (LLM)
  - peft (LoRA 파인튜닝)
  - torch (GPU 연산)
  - sounddevice/soundfile (음성)
  - llama-cpp-python (GGUF 로더)

### 설치 가이드
```bash
# 가상환경 활성화
.\ksmevn\Scripts\Activate.ps1

# 메인 프로그램 실행
python main.py

# 모델 다운로드 (수동)
# Nous-Hermes-2-Mistral-7B-DPO Q5_K_M.gguf → models/
# OpenVoice V2 체크포인트 → OpenVoice/
```

## 🔧 문제 해결

### 자주 발생하는 문제
1. **GPU 메모리 부족**
   - 다른 GPU 프로그램 종료
   - `torch.cuda.empty_cache()` 실행

2. **모델 로드 실패**
   - `models/rtx3070_optimized_best/` 확인
   - 권한 문제 확인

3. **음성 인식 실패**
   - 마이크 설정 (`p` 메뉴)
   - 마이크 권한 확인

4. **언어 제한 관련**
   - RTX 3070 모델은 영어/한국어만 지원
   - 다른 언어 사용시 기본 모델로 전환

5. **TTS 오류**
   - soundfile 패키지 설치 확인
   - OpenVoice 파일 확인

### 디버깅
- **로그 활성화**: 메인 메뉴에서 `lg`
- **상세 정보**: 모델 로딩, TTS, 언어 감지 상태 확인
- **파인튜닝 상태**: 메뉴에서 `ft`

## 📝 최종 완료 상태

### ✅ 모든 요구사항 달성
- [x] RTX 3070 무제한 모델을 영어/한국어로 제한
- [x] 개발 환경 정리 (불필요한 파일 제거)
- [x] README.md 완전 새로 작성
- [x] star ledd me.txt 현재 상황 반영
- [x] 모델 선택 메뉴 업데이트
- [x] 사용자 안내 메시지 추가

### 🎯 현재 프로젝트 상태
- **핵심 기능**: 완전 작동
- **모델 시스템**: 안정적 다중 모델 지원
- **언어 제한**: 완전 구현
- **안전성**: 강화됨
- **사용성**: 직관적 메뉴 시스템
- **성능**: RTX 3070 최적화 완료

### 🚀 향후 확장 가능 영역
- 웹 인터페이스 개발
- 모바일 앱 연동 (API)
- 이미지 인식 모델 통합
- 실시간 화면 인식
- 추가 언어 지원 (안전성 검토 후)

## 🗓️ 프로젝트 진행 계획 및 개선 로드맵

### ✅ 완료된 기능들
1. **TTS 모델 추가하여 사용자와 대화 기능** - ✅ 완료
2. **실시간 연속 대화 및 컨텍스트 유지 기능** - ✅ 완료
3. **실시간 스트리밍 TTS로 응답 속도 향상** - ✅ 완료
4. **RTX 3070 GPU 최적화 및 언어 제한** - ✅ 완료
5. **하이브리드 파인튜닝 시스템** - ✅ 완료

### 🔄 현재 진행 중
4. **대규모 LLM 모델 보완 계획**
   - **신경망 연결기 파인튜닝 모델**: 대화 유형 분석 AI
     - 분별 종류: QnA, 일상담소, 특정 프로그램(캐드, 스케치업), 정보 없음
     - **참조 기술**: 
       - Text Classification using Transformers
       - BERT/RoBERTa for sequence classification
       - Custom dataset creation for domain classification
   
   - **세부 신경망 파인튜닝 모델**: 분별 종류별 전문 모델
     - **참조 기술**:
       - LoRA (Low-Rank Adaptation) for efficient fine-tuning
       - PEFT (Parameter-Efficient Fine-Tuning)
       - Multi-task learning frameworks

### 📋 향후 계획 (우선순위 순)

#### 단기 계획 (1-3개월)
5. **작업 특화형 파인튜닝 시스템**
   - **목표**: 특정 작업(CAD, SketchUp, 프로그래밍 등)에 특화된 AI 어시스턴트
   - **참조 기술**:
     - Domain-specific corpus collection
     - Task-oriented dialogue systems
     - Few-shot learning techniques
     - Retrieval-Augmented Generation (RAG)

6. **인터넷 자료를 통한 학습 기능 추가**
   - **목표**: 실시간 웹 검색 및 최신 정보 반영
   - **참조 기술**:
     - Web scraping (BeautifulSoup, Scrapy)
     - Search API integration (Google, Bing)
     - Information extraction and summarization
     - Knowledge graph construction

#### 중기 계획 (3-6개월)
7. **이미지 인식 모델 추가**
   - **목표**: 이미지 분석 및 설명 기능
   - **참조 기술**:
     - CLIP (Contrastive Language-Image Pretraining)
     - BLIP-2 for vision-language understanding
     - LLaVA (Large Language and Vision Assistant)
     - OpenAI GPT-4 Vision API

8. **스크린샷 인식 후 조언 기능 추가**
   - **목표**: 화면 캡처 후 상황별 조언 제공
   - **참조 기술**:
     - Screen capture libraries (PIL, pyautogui)
     - OCR (Optical Character Recognition) - Tesseract, EasyOCR
     - UI element detection and classification
     - Context-aware advice generation

#### 장기 계획 (6-12개월)
9. **실시간 화면 인식 추가**
   - **목표**: 실시간 화면 모니터링 및 분석
   - **참조 기술**:
     - Real-time screen capture and processing
     - Computer vision for UI understanding
     - Activity recognition algorithms
     - Streaming data processing (Apache Kafka, Redis)

10. **실시간 화면 인식 후 입력 장치 행동**
    - **목표**: AI가 화면을 보고 자동으로 마우스/키보드 조작
    - **참조 기술**:
      - PyAutoGUI for automation
      - Computer vision-based UI automation
      - Reinforcement learning for action planning
      - Screen understanding and element localization

### 🔬 실험 계획 및 기술 접근법

#### 단일 LLM 프롬프트 엔지니어링
- **현재 채택**: LLM에게 역할 지정 후 답변 패턴 자체 지정 (성능 우수)
- **실험 계획**:
  1. **역할 판단 파인튜닝**: 
     - **참조 기술**: Intent classification, Role-based prompting
     - **도구**: Custom dataset creation, Fine-tuning with LoRA
  
  2. **특정 역할별 파인튜닝**:
     - **참조 기술**: Multi-expert models, Mixture of Experts (MoE)
     - **도구**: Specialized model training, Model ensemble techniques

### 🛠️ 기술 스택 확장 계획

#### AI/ML 프레임워크
- **현재**: Transformers, PEFT, PyTorch
- **추가 예정**: 
  - Hugging Face Datasets (데이터 관리)
  - LangChain (LLM 애플리케이션 프레임워크)
  - OpenAI API (GPT-4 Vision, DALL-E)
  - Stability AI (Stable Diffusion)

#### 웹/모바일 개발
- **웹 인터페이스**: Flask/FastAPI, React/Vue.js
- **모바일 연동**: REST API, WebSocket for real-time
- **데이터베이스**: PostgreSQL, Vector DB (Pinecone, Weaviate)

#### 컴퓨터 비전
- **이미지 처리**: OpenCV, PIL/Pillow
- **OCR**: Tesseract, PaddleOCR, EasyOCR
- **객체 감지**: YOLO, R-CNN 계열
- **이미지 생성**: Stable Diffusion, DALL-E

#### 자동화 및 통합
- **GUI 자동화**: PyAutoGUI, Selenium
- **시스템 통합**: Win32 API, AppleScript (macOS)
- **실시간 처리**: Apache Kafka, Redis Streams
- **모니터링**: Prometheus, Grafana

### 📈 성능 최적화 계획

#### 모델 최적화
- **양자화**: INT8, INT4 quantization
- **모델 압축**: Knowledge distillation, Pruning
- **추론 최적화**: TensorRT, ONNX Runtime
- **분산 처리**: Model parallelism, Pipeline parallelism

#### 시스템 최적화
- **메모리 관리**: Gradient checkpointing, Memory mapping
- **GPU 활용**: Multi-GPU training, Mixed precision
- **캐싱**: Model output caching, Embedding caching
- **배치 처리**: Dynamic batching, Request batching

---

**최종 업데이트**: 2025년 7월 8일  
**개발 상태**: RTX 3070 언어 제한 완료, 모든 요구사항 달성  
**프로젝트 안정성**: 높음, 실용적 사용 가능  
**다음 마일스톤**: 작업 특화형 파인튜닝 시스템 개발